events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    server_tokens off;

    # Logs principais
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log warn;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=15r/s;
    limit_req_zone $binary_remote_addr zone=scan:10m rate=1r/s;

    upstream faturium_backend {
        server faturium-app:8080;
    }

    server {
        listen 7594;
        server_name _;

        # BLOQUEAR ROTA ROOT
        location = / {
            access_log off;
            return 444;
        }

        # Health check do Nginx
        location /nginx-health {
            return 200 "nginx ok\n";
            add_header Content-Type text/plain;
        }

        # BLOQUEAR ARQUIVOS SENSÍVEIS (baseado nos seus logs)
        location ~ /\.(env|git|DS_Store) {
            access_log off;
            return 444;
        }

        location = /favicon.ico {
            access_log off;
            log_not_found off;
            return 404;
        }

        location = /robots.txt {
            access_log off;
            return 444;
        }

        # BLOQUEAR ENDPOINTS ESPECÍFICOS DOS SEUS LOGS
        location ~ ^/@vite/ {
            access_log off;
            return 444;
        }

        location ~ ^/actuator/ {
            access_log off;
            return 444;
        }

        location = /server {
            access_log off;
            return 444;
        }

        location = /server-status {
            access_log off;
            return 444;
        }

        location ~ ^/debug/ {
            access_log off;
            return 444;
        }

        location ~ ^/telescope/ {
            access_log off;
            return 444;
        }

        location = /about {
            access_log off;
            return 444;
        }

        location = /config.json {
            access_log off;
            return 444;
        }

        location = /login.action {
            access_log off;
            return 444;
        }

        location = /_all_dbs {
            access_log off;
            return 444;
        }

        location ~ ^/v2/_catalog {
            access_log off;
            return 444;
        }

        location ~ ^/ecp/Current/ {
            access_log off;
            return 444;
        }

        location = /info.php {
            access_log off;
            return 444;
        }

        location ~ /\.vscode/ {
            access_log off;
            return 444;
        }

        # BLOQUEAR WORDPRESS PATHS
        location ~ ^/(wp-admin|wp-login|wp-content|wp-includes|xmlrpc\.php) {
            access_log off;
            return 444;
        }

        # CONFIGURAÇÃO ESPECÍFICA PARA SUA ROTA SSE
        location /sse/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://faturium_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Connection '';

            proxy_http_version 1.1;
            proxy_buffering off;
            proxy_cache off;
            proxy_read_timeout 3600s;
            proxy_connect_timeout 30s;
            proxy_send_timeout 3600s;

            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "0";

            chunked_transfer_encoding on;
        }

        # TODAS as outras rotas (apenas requisições legítimas)
        location / {
            limit_req zone=scan burst=5 nodelay;

            proxy_pass http://faturium_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization $http_authorization;

            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
}
